{"version":3,"sources":["helpers.js","forecastAnalysis.js","App.js","serviceWorker.js","index.js"],"names":["toTitleCase","str","replace","match","toUpperCase","toLowerCase","getDaysAgo","days","date","Date","setDate","getDate","getMidnightDateOrTime","dateTime","getMonth","time","toLocaleTimeString","split","getHours","slice","getISODate","toISOString","ForecastAnalysis","analysis","useState","weather","setWeather","Container","Tabs","justify","className","activeKey","onSelect","key","map","weatherType","Tab","eventKey","title","Object","keys","includes","metadata","display_name","disabled","AnalysisChart","chart","activeDataDetail","activeData","setActiveData","handleChange","useCallback","prop_name","MemodBinsChart","onCursorChange","ActiveDataDisplay","displayInfo","units","x","y","data","MemodForecastChart","Col","Row","xs","React","memo","activeDay","setActiveDay","activeFcasts","getActiveFcasts","chartedData","push","displayName","color","leadDay","i","name","entries","lead_days","fcasts","datum","style","opacity","obs","erreas","errors","reduce","timeStr","amount","erreaDatum","y0","lastErrea","length","valueOf","errea","fill","stroke","legendSymbol","type","getChartedData","legendData","chartedGroups","forecastGroup","find","group","props","otherGroups","filter","day","dayLabel","line","children","child","theme","symbol","cursor","labels","isCharted","getLegendData","TitleStatsDisplay","scale","domainPadding","padding","top","bottom","left","right","containerComponent","voronoiDimension","labelComponent","Cursor","onActivated","points","tickCount","tickFormat","ticks","size","tickLabels","fontSize","grid","offsetY","dependentAxis","crossAxis","axisLabelComponent","dx","angle","label","events","eventHandlers","onClick","evt","target","labelName","allFcastDays","toggleDisplayed","orientation","borderPadding","gutter","symbolSpacer","range","strokeWidth","x1","x2","y1","Math","max","y2","min","activeDayDisplayText","stats","cumulative_stats","prop","LabeledValue","value","flat","Boolean","getPrototypeOf","prototype","header","xDesc","_x","toLocaleString","dateStyle","timeStyle","formattedErrorDatum","formattedData","forEach","_y","childName","formattedValue","formatForDisplay","val","unit","round","activeAnalysis","bin_count","bins","bias","legend","dy","colorScale","offset","DEFAULT_START","DEFAULT_END","DATA_START","DATA_END","ForecastRangeForm","handleSubmit","start","setStart","end","setEnd","warning","ForecastDayPicker","onChange","md","Button","rest","disabledDays","before","after","onDayChange","mod","dayPickerProps","window","location","hostname","ReactDOM","render","apiURL","initialData","JSON","parse","setAnalysis","statusMessage","setStatusMessage","fetchAnalysis","fetch","then","resp","json","catch","error","message","useEffect","CACHED_DATA","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b423dcf.chunk.js","sourcesContent":["// Convert snake case to title case.\r\nexport function toTitleCase(str) {\r\n  return (\r\n    str.replace(\r\n      /_/,\r\n      ' ',\r\n    ).replace(\r\n      /(?:(^|\\(|\"|\\s|-|,)\\w)\\w+/g,\r\n      (match) => (match === match.toUpperCase() ? match.toLowerCase() : match),\r\n    ).replace(\r\n      /(?:^|\\(|\"|\\s|-|,)\\w/g,\r\n      (match) => match.toUpperCase(),\r\n    )\r\n  );\r\n}\r\n\r\nexport function getDaysAgo(days) {\r\n  const date = new Date();\r\n  date.setDate(date.getDate() - days);\r\n\r\n  return date;\r\n}\r\n\r\n// Return month/day if time is midnight, otherwise return the time (hh:mm).\r\nexport function getMidnightDateOrTime(dateTime) {\r\n  const date = `${dateTime.getMonth() + 1}/${dateTime.getDate()}`;\r\n  const time = dateTime.toLocaleTimeString().split(/[:\\s]/);\r\n\r\n  return dateTime.getHours() ? `${time[0]} ${time.slice(-1)}` : date;\r\n}\r\n\r\n// Return an instance of Date of the first day of the previous month. Year is ignored.\r\nexport function getLastMonthStart() {\r\n  const date = new Date();\r\n  date.setMonth(date.getMonth() - 1);\r\n  date.setDate(1);\r\n\r\n  return date;\r\n}\r\n\r\n// Return iso formatted date without time info.\r\nexport function getISODate(date) {\r\n  return date.toISOString().split('T')[0];\r\n}\r\n\r\nexport function getISOHourRounded(date) {\r\n  const dateCopy = new Date(date);\r\n  if (date.getMinutes() >= 30) {\r\n    dateCopy.setHours(date.getHours() + 1);\r\n  }\r\n  const [hours] = dateCopy.toISOString().split('T')[1].split(':');\r\n\r\n  return `${getISODate(date)}T${hours}:00`;\r\n}\r\n\r\n// Instantiate a Date, but with the tiemzone set to GMT instead of the local one.\r\nexport function parseToUTC(iso) {\r\n  const date = new Date(iso);\r\n\r\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours()));\r\n}\r\n","import React, { useState, useCallback } from 'react';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n} from 'react-bootstrap';\r\n\r\nimport {\r\n  VictoryChart,\r\n  VictoryAxis,\r\n  VictoryArea,\r\n  VictoryBar,\r\n  VictoryGroup,\r\n  VictoryLabel,\r\n  VictoryLine,\r\n  VictoryLegend,\r\n  VictoryVoronoiContainer,\r\n} from 'victory';\r\n\r\nimport { toTitleCase, getMidnightDateOrTime } from './helpers';\r\n\r\n// Allow navigation between the weather AnalysisCharts available via Tabs.\r\nexport default function ForecastAnalysis({ analysis }) {\r\n  const [weather, setWeather] = useState('temperature');\r\n\r\n  // The weather type property names AnalysisChart is set up to handle.\r\n  const workingWeathers = [\r\n    'temperature',\r\n    'dewpoint',\r\n    'wind_speed',\r\n    'cloud_cover',\r\n    'precip_chance',\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Tabs justify className='flex-nowrap h6 w-100'\r\n          activeKey={weather}\r\n          onSelect={(key) => setWeather(key)}\r\n        >\r\n          {workingWeathers.map((weatherType) => (\r\n            <Tab\r\n              eventKey={weatherType}\r\n              title={\r\n                !Object.keys(analysis).includes(weatherType)\r\n                  ? toTitleCase(weatherType)\r\n                  : analysis[weatherType].metadata.display_name\r\n                }\r\n              key={weatherType}\r\n              disabled={!Object.keys(analysis).includes(weatherType)}\r\n            />\r\n          ))}\r\n        </Tabs>\r\n      </Container>\r\n      <AnalysisChart className='w-100'\r\n        analysis={analysis[weather]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Handle setting up the correct chart and ActiveDataDisplay based on the weather type of the\r\n// analysis prop, and update these components when changes occur.\r\nfunction AnalysisChart({ analysis }) {\r\n  const [activeData, setActiveData] = useState([]);\r\n\r\n  // Memomize callback so memoized children it's passed to don't render unnecessarily.\r\n  const handleChange = useCallback(setActiveData, []);\r\n\r\n  let chart;\r\n  let activeDataDetail;\r\n  if (analysis.metadata.prop_name === 'precip_chance') {\r\n    chart = <MemodBinsChart analysis={analysis} onCursorChange={handleChange} />;\r\n    activeDataDetail = (\r\n      <ActiveDataDisplay\r\n        displayInfo={{\r\n          // Overwrite units property of metadata to make y unitless.\r\n          ...analysis.metadata,\r\n          ...{ units: { x: analysis.metadata.units, y: '' } },\r\n        }}\r\n        data={activeData}\r\n      />\r\n    );\r\n  } else {\r\n    chart = (\r\n      <MemodForecastChart\r\n        analysis={analysis}\r\n        onCursorChange={handleChange}\r\n      />\r\n    );\r\n    activeDataDetail = (\r\n      <ActiveDataDisplay\r\n        displayInfo={analysis.metadata}\r\n        data={activeData}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Col>\r\n      <div className='chart-container'>\r\n        {chart}\r\n      </div>\r\n      <Container>\r\n        <Row><Col xs={11}>{activeDataDetail}</Col></Row>\r\n      </Container>\r\n    </Col>\r\n  );\r\n}\r\n\r\n// Display visualization of analysis inlcuding a chart of forecasted vs observed values and\r\n// highlight areas where the forecast was considered inaccurate. The chart includes a\r\n// TitleStatsDisplay as a title that displays the forecast stats and an interactive legend that\r\n// allows selection of which lead day time forecast to display. When the mouse cursor moves over\r\n// the chart onCursorChange will be passed a list of the nearest data point objects.\r\n// Rendering is expensive. Use the memoized version available as MemodForecastChart.\r\nfunction ForecastChart({ analysis, onCursorChange }) {\r\n  // All forecasts will be displayed when activeDay is falsey.\r\n  const [activeDay, setActiveDay] = useState(null);\r\n\r\n  const activeFcasts = getActiveFcasts(analysis, activeDay);\r\n  const chartedData = getChartedData(analysis, activeDay);\r\n  const legendData = getLegendData(analysis, chartedData);\r\n\r\n  // Called by the onClick handler of the VictoryLegend.\r\n  const toggleDisplayed = (labelName) => {\r\n    const allFcastDays = Object.keys(analysis.lead_days);\r\n    const [day] = labelName.split('-Day');\r\n\r\n    if (!activeDay && labelName.includes('Error')) {\r\n      setActiveDay(activeFcasts[0]);\r\n    } else if ((!activeDay || !activeFcasts.includes(day)) && allFcastDays.includes(day)) {\r\n      setActiveDay(day);\r\n    } else if (labelName === 'Actual' || activeFcasts.includes(day)) {\r\n      setActiveDay(null);\r\n    }\r\n\r\n    // Reset cursor's nearest data points.\r\n    onCursorChange([]);\r\n  };\r\n\r\n  return (\r\n    <Row className='pt-3'>\r\n      <Col xs={12} className='w-100'>\r\n        <TitleStatsDisplay\r\n          activeDay={activeDay}\r\n          analysis={analysis}\r\n        />\r\n      </Col>\r\n      <Col xs={12} className='w-100'>\r\n        <VictoryChart\r\n          scale={{ x: 'time' }}\r\n          domainPadding={{ y: 20 }}\r\n          padding={{\r\n            top: 25, bottom: 50, left: 50, right: 75,\r\n          }}\r\n          containerComponent={\r\n            <VictoryVoronoiContainer\r\n              voronoiDimension='x'\r\n              labels={() => null} // Otherwise Cursor is not displayed.\r\n              labelComponent={<Cursor />}\r\n              onActivated={(points) => onCursorChange(points)}\r\n            />\r\n          }\r\n        >\r\n\r\n          <VictoryAxis\r\n            tickCount={6}\r\n            tickFormat={getMidnightDateOrTime}\r\n            style={{\r\n              ticks: { stroke: 'black', size: 5 },\r\n              tickLabels: { fontSize: 12 },\r\n              grid: { stroke: 'grey' },\r\n            }}\r\n            offsetY={50}\r\n          />\r\n          <VictoryAxis\r\n            dependentAxis\r\n            crossAxis={false}\r\n            axisLabelComponent={<VictoryLabel dx={-15} angle={0} />}\r\n            label={analysis.metadata.units}\r\n            style={{\r\n              grid: { stroke: 'grey' },\r\n              tickLabels: { fontSize: 12 },\r\n            }}\r\n          />\r\n\r\n          <VictoryLegend\r\n            data={legendData}\r\n            events={[{\r\n              eventHandlers: {\r\n                onClick: (evt, target) => {\r\n                  if (target && target.datum) {\r\n                    toggleDisplayed(target.datum.name);\r\n                  }\r\n                },\r\n              },\r\n            }]}\r\n            x={25} y={10}\r\n            orientation='horizontal'\r\n            borderPadding={{\r\n              top: 0, bottom: 0, left: 5, right: 0,\r\n            }}\r\n            gutter={10}\r\n            symbolSpacer={5}\r\n            style={{ labels: { fontSize: 9 } }}\r\n          />\r\n\r\n          {chartedData}\r\n\r\n        </VictoryChart>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\nconst MemodForecastChart = React.memo(ForecastChart);\r\n\r\n// Return an array of integers in string form that correspond to the active forecast lead days.\r\nfunction getActiveFcasts(analysis, activeDay) {\r\n  return activeDay ? [activeDay] : Object.keys(analysis.lead_days);\r\n}\r\n\r\n// Generate and return an array of VictoryChart components to be charted on the ForecastChart.\r\n// ActiveDataDisplay, getLegendData, and the local toggleDisplay in ForecastChart depend on the\r\n// implementation details here, most significantly, the name and displayName prop values.\r\nfunction getChartedData(analysis, activeDay) {\r\n  const chartedData = [];\r\n  const activeFcasts = getActiveFcasts(analysis, activeDay);\r\n\r\n  // Add forecasts lines\r\n  chartedData.push(\r\n    <VictoryGroup displayName='Forecast' key='Forecast' color='red'>\r\n      {\r\n        activeFcasts.map((leadDay, i) => (\r\n          <VictoryLine\r\n            displayName={`${leadDay}-Day`}\r\n            name={`${leadDay}-Day`}\r\n            key={leadDay}\r\n            data={Object.entries(analysis.lead_days[leadDay].fcasts)}\r\n            x={(datum) => new Date(datum[0])}\r\n            y={1}\r\n            style={{\r\n              data: {\r\n                opacity: i >= 1 ? (8 - i) / 10 : 1.0,\r\n              },\r\n            }}\r\n          />\r\n        ))\r\n      }\r\n    </VictoryGroup>,\r\n  );\r\n\r\n  // Add observed weather line\r\n  chartedData.push(\r\n    <VictoryGroup displayName='Actual' key='Actual' color='black'>\r\n      <VictoryLine\r\n        displayName='Actual'\r\n        name='Actual'\r\n        data={Object.entries(analysis.obs)}\r\n        x={(datum) => new Date(datum[0])}\r\n        y={1}\r\n      />\r\n    </VictoryGroup>,\r\n  );\r\n\r\n  // Forecast errors should only be charted when a single forecast lead day is active.\r\n  let erreas = [];\r\n  if (activeDay) {\r\n    erreas = Object.entries(analysis.lead_days[activeDay].errors).reduce(\r\n      // Create data points for error VictoryAreas and organize into an array of arrays of\r\n      // data for the separate contiguous VictoryAreas.\r\n      (errors, [timeStr, amount]) => {\r\n        const time = new Date(timeStr);\r\n        const erreaDatum = {\r\n          x: time,\r\n          y: analysis.lead_days[activeDay].fcasts[timeStr],\r\n          y0: analysis.obs[timeStr],\r\n          amount,\r\n        };\r\n\r\n        const lastErrea = errors.length > 0 ? errors[errors.length - 1] : false;\r\n        if (\r\n          lastErrea\r\n          && lastErrea.slice(-1)[0].x.valueOf() === time.valueOf() - 3600000\r\n        ) {\r\n          lastErrea.push(erreaDatum);\r\n        } else {\r\n          errors.push([erreaDatum]);\r\n        }\r\n\r\n        return errors;\r\n      },\r\n      [],\r\n    ).map((errea, i) => (\r\n      // Now actually create the VictoryAreas from the data.\r\n      <VictoryArea displayName={`Error-Area-${i}`} key={`Error-Area-${i}`}\r\n        name={`Error-Area-${i}`}\r\n        data={errea}\r\n      />\r\n    ));\r\n  }\r\n\r\n  // Add the VictoryAreas that were created.\r\n  chartedData.push(\r\n    <VictoryGroup\r\n      displayName='Error' key='Error'\r\n      style={{\r\n        data: {\r\n          opacity: 0.4,\r\n          fill: 'magenta',\r\n          stroke: 'magenta',\r\n        },\r\n        // getLegendData will use this attribute as the symbol type when it's present.\r\n        legendSymbol: { type: 'square' },\r\n      }}\r\n    >\r\n      {erreas}\r\n    </VictoryGroup>,\r\n  );\r\n\r\n  return chartedData;\r\n}\r\n\r\n// Generate the keys(data) for the chart legend. The name attributes that are set are especially\r\n// important as they are passed to toggleDisplay in ForecastChart.\r\nfunction getLegendData(analysis, chartedGroups) {\r\n  const legendData = [];\r\n  const forecastGroup = chartedGroups.find((group) => group.props.displayName === 'Forecast');\r\n  const otherGroups = chartedGroups.filter((group) => group.props.displayName !== 'Forecast');\r\n\r\n  // Always add all forcasts available in the analysis so they can be clicked to be activated.\r\n  legendData.push(\r\n    ...Object.keys(analysis.lead_days).map((day) => {\r\n      const dayLabel = `${day}-Day`;\r\n\r\n      // Find line if forecast lead-day is displayed and set styling accordingly.\r\n      const line = forecastGroup.props.children.find(\r\n        (child) => child.props.name === dayLabel,\r\n      );\r\n      const style = line && { ...line.props.theme.line.style, ...line.props.style };\r\n\r\n      return {\r\n        name: `${day}-Day`,\r\n        symbol: {\r\n          opacity: line ? style.data.opacity : 0.1,\r\n          fill: forecastGroup.props.color,\r\n          cursor: 'pointer',\r\n        },\r\n        labels: {\r\n          opacity: line ? 1 : 0.2,\r\n          cursor: 'pointer',\r\n        },\r\n      };\r\n    }),\r\n  );\r\n\r\n  // Add other groups and style as active or inactive based on weather the actually have any\r\n  // charted data.\r\n  legendData.push(\r\n    ...otherGroups.map(\r\n      (group) => {\r\n        const style = { ...group.props.theme.line.style, ...group.props.style };\r\n        const isCharted = group.props.children.length !== 0;\r\n        return {\r\n          name: group.props.displayName,\r\n          symbol: {\r\n            opacity: isCharted ? style.data.opacity : 0.2,\r\n            fill: style.data.stroke,\r\n            cursor: 'pointer',\r\n            type: style.legendSymbol && style.legendSymbol.type ? style.legendSymbol.type : 'circle',\r\n          },\r\n          labels: {\r\n            opacity: isCharted ? 1 : 0.2,\r\n            cursor: 'pointer',\r\n          },\r\n        };\r\n      },\r\n    ),\r\n  );\r\n\r\n  return legendData;\r\n}\r\n\r\n// Display a vertical line on chart at the x position. Use to show mouse pointer position on chart.\r\nfunction Cursor({ x, scale }) {\r\n  const range = scale.y.range();\r\n  return (\r\n    <line\r\n      style={{\r\n        stroke: 'lightgrey',\r\n        strokeWidth: 1,\r\n      }}\r\n      x1={x}\r\n      x2={x}\r\n      y1={Math.max(...range)}\r\n      y2={Math.min(...range)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TitleStatsDisplay({ analysis, activeDay }) {\r\n  const activeDayDisplayText = !activeDay ? 'Cumulative' : `${activeDay}-Day`;\r\n  const stats = !activeDay ? analysis.cumulative_stats : analysis.lead_days[activeDay].stats;\r\n\r\n  return (\r\n    <Container>\r\n      <Row className='d-flex justify-content-center'>\r\n        <h6>\r\n          {`Forecast Accuracy: ${activeDayDisplayText}`}\r\n        </h6>\r\n      </Row>\r\n      <Row className='d-flex justify-content-center'>\r\n          {\r\n            // Stats objects contain multiple entries, but happen to always include the key of the\r\n            // parent in the entry that contains the actual value we want to display.\r\n            // TODO: refactor to be less obtuse.\r\n            Object.keys(stats).map((type) => (\r\n              Object.keys(stats[type]).map((prop) => {\r\n                if (type.includes(prop)) {\r\n                  return (\r\n                    <LabeledValue\r\n                     label={type}\r\n                     value={stats[type][prop]}\r\n                     units={analysis.metadata.units}\r\n                     key={prop}\r\n                   />\r\n                  );\r\n                }\r\n                return false;\r\n              })\r\n            )).flat().filter(Boolean)\r\n          }\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// Display active data points. displayInfo be a string or object with x and y attributes of the\r\n// units to be used with the data points and data should be a list of the datum objects.\r\nfunction ActiveDataDisplay({ displayInfo, data }) {\r\n  if (!data || data.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  let { units } = displayInfo;\r\n  if (!units || Object.getPrototypeOf(units) !== Object.prototype) {\r\n    units = { x: units, y: units };\r\n  }\r\n\r\n  // Format header text depending on type of charted data\r\n  let header = displayInfo.display_name || '';\r\n  let xDesc = '';\r\n  if (data[0]._x instanceof Date) {\r\n    const [date, time] = data[0]._x\r\n      .toLocaleString({ dateStyle: 'short', timeStyle: 'short' }).split(',');\r\n    xDesc = `${header && ' on '}${date} at ${time}`;\r\n  } else {\r\n    xDesc = `${header && ': '}${data[0][0]} ${units.x}`;\r\n  }\r\n  header = `${header}${xDesc}`;\r\n\r\n\r\n  const formattedData = [];\r\n  let formattedErrorDatum;\r\n  data.forEach((datum) => {\r\n    if (datum._y === null) {\r\n      return;\r\n    }\r\n\r\n    if (!datum.childName.includes('Error')) {\r\n      formattedData.push(\r\n        <LabeledValue\r\n          label={datum.childName}\r\n          value={datum._y}\r\n          units={units.y}\r\n          key={datum.childName}\r\n        />,\r\n      );\r\n    } else {\r\n      formattedErrorDatum = <LabeledValue\r\n          label='Forecast Error'\r\n          value={datum.amount}\r\n          units={units.y}\r\n          key='Forecast Error'\r\n          className='text-danger'\r\n        />;\r\n    }\r\n  });\r\n\r\n  // Error LabeledValue is pushed at the end so that it is displayed last.\r\n  if (formattedErrorDatum) {\r\n    formattedData.push(formattedErrorDatum);\r\n  }\r\n\r\n  return (\r\n    <Col className='h6 font-weight-normal'>\r\n      <Row className='pb-2'>\r\n        {header}\r\n      </Row>\r\n      <Row>\r\n        {formattedData}\r\n      </Row>\r\n    </Col>\r\n  );\r\n}\r\n\r\n// Display text in the form label: value units. className is appended to the containing span's\r\n// className and is optional.\r\n// TODO: Eliminate the need for type by handling special accuracy formatting else where.\r\nfunction LabeledValue({\r\n  label, value, units, type, className,\r\n}) {\r\n  const formatForDisplay = (val, unit) => `${Math.round(val * 10) / 10} ${unit}`;\r\n  const valueType = (type || label).toLowerCase();\r\n\r\n  let formattedValue;\r\n  if (valueType === 'accuracy') {\r\n    formattedValue = formatForDisplay(value * 100.0, '%');\r\n  } else {\r\n    formattedValue = formatForDisplay(value, units);\r\n  }\r\n  return (\r\n    <span className={`mr-3 d-inline-block ${className}`}>\r\n      <span> {toTitleCase(label)}: </span>\r\n      <span className='font-weight-light ml-2'> {formattedValue} </span>\r\n    </span>\r\n  );\r\n}\r\n\r\n// Analogous to ForecastChart, but for precip probablity forcasts.\r\n// TODO: Refactor this and ForcastChart to eliminiate redundant code.\r\nfunction BinsChart({ analysis, onCursorChange }) {\r\n  // Cumulative stats will be displayed when activeDay is falsey.\r\n  const [activeDay, setActiveDay] = useState(null);\r\n\r\n  const activeAnalysis = activeDay\r\n    ? analysis.lead_days[activeDay].stats\r\n    : analysis.cumulative_stats;\r\n  const data = Object.entries(activeAnalysis.bin_count.bins);\r\n\r\n  const legendData = Object.keys(analysis.lead_days).map((day) => (\r\n    {\r\n      name: `${day}-Day`,\r\n      symbol: {\r\n        opacity: activeDay === day ? 1.0 : 0.2,\r\n        fill: 'darkblue',\r\n        type: 'square',\r\n        cursor: 'pointer',\r\n      },\r\n      labels: {\r\n        opacity: activeDay === day ? 1.0 : 0.3,\r\n        cursor: 'pointer',\r\n      },\r\n    }\r\n  ));\r\n  legendData.push({\r\n    name: 'Cumulative',\r\n    symbol: {\r\n      opacity: !activeDay ? 1.0 : 0.2,\r\n      fill: 'darkblue',\r\n      type: 'square',\r\n      cursor: 'pointer',\r\n    },\r\n    labels: {\r\n      opacity: !activeDay ? 1.0 : 0.3,\r\n      cursor: 'pointer',\r\n    },\r\n  });\r\n  legendData.push({ name: 'Expected', symbol: { fill: 'lightblue', type: 'square' } });\r\n\r\n  const toggleDisplayed = (labelName) => {\r\n    const [day] = labelName === 'Cumulative' ? [null] : labelName.split('-Day');\r\n    if (activeDay !== day && day !== 'Expected') {\r\n      setActiveDay(day);\r\n    }\r\n\r\n    onCursorChange([]);\r\n  };\r\n\r\n  return (\r\n    <Container className='pt-3'>\r\n      <Row className='d-flex justify-content-center'>\r\n        <h6>\r\n          {'Precipitation Chance Bin Counts'}\r\n        </h6>\r\n      </Row>\r\n      <Row className='d-flex justify-content-center'>\r\n        <LabeledValue\r\n          label='Bias'\r\n          value={activeAnalysis.bin_count.bias}\r\n          units='%'\r\n        />\r\n      </Row>\r\n      <Row>\r\n        <VictoryChart\r\n          padding={{\r\n            top: 25, bottom: 50, left: 50, right: 75,\r\n          }}\r\n          containerComponent={\r\n            <VictoryVoronoiContainer\r\n              voronoiDimension='x'\r\n              labels={() => null}\r\n              labelComponent={<Cursor />}\r\n              onActivated={(points) => onCursorChange(points)}\r\n            />\r\n          }\r\n        >\r\n          <VictoryLegend\r\n            x={15} y={5}\r\n            orientation='horizontal'\r\n            borderPadding={{\r\n              top: 0, bottom: 0, left: 5, right: 0,\r\n            }}\r\n            gutter={10}\r\n            symbolSpacer={5}\r\n            style={{ labels: { fontSize: 9 } }}\r\n            data={legendData}\r\n            events={[{\r\n              eventHandlers: {\r\n                onClick: (evt, target, i, legend) => {\r\n                  if (target && target.datum) {\r\n                    toggleDisplayed(target.datum.name);\r\n                  }\r\n                },\r\n              },\r\n            }]}\r\n          />\r\n\r\n          <VictoryAxis\r\n            style={{\r\n              ticks: { stroke: 'black', size: 5 },\r\n              tickLabels: { fontSize: 12 },\r\n              grid: { stroke: 'grey' },\r\n            }}\r\n            label='Forecasted chance of pricipitation (%)'\r\n            offsetY={50}\r\n            axisLabelComponent={<VictoryLabel dy={5} style={{ fontSize: 11 }} />}\r\n          />\r\n          <VictoryAxis\r\n            dependentAxis\r\n            crossAxis={false}\r\n            style={{\r\n              grid: { stroke: 'grey' },\r\n              tickLabels: { fontSize: 12 },\r\n            }}\r\n            label='Number of precipitation observations'\r\n            axisLabelComponent={<VictoryLabel dy={-5} angle={-90} style={{ fontSize: 11 }} />}\r\n          />\r\n\r\n          <VictoryGroup\r\n            colorScale={['darkblue', 'lightblue']}\r\n            offset={5}\r\n          >\r\n            <VictoryBar\r\n              name='Observed occurances'\r\n              data={data}\r\n              x={0}\r\n              y={[1, 'obs']}\r\n            />\r\n            <VictoryBar\r\n              name='Predicted occurances'\r\n              data={data}\r\n              x={0}\r\n              y={[1, 'predicted']}\r\n            />\r\n          </VictoryGroup>\r\n\r\n        </VictoryChart>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nconst MemodBinsChart = React.memo(BinsChart);","import React, { useState, useEffect } from 'react';\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n\nimport {\n  Container, Row, Col, Button,\n} from 'react-bootstrap';\n\nimport ForecastAnalysis from './forecastAnalysis';\nimport { getDaysAgo, getISODate } from './helpers';\n\nconst DEFAULT_START = getDaysAgo(8);\nconst DEFAULT_END = getDaysAgo(1);\nconst DATA_START = new Date(2019, 0, 24);\nconst DATA_END = getDaysAgo(1);\n\nexport default function AnalysisPage({ apiURL, initialData=false }) {\n  const [analysis, setAnalysis] = useState(JSON.parse(initialData));\n  const [statusMessage, setStatusMessage] = useState('Select date range.');\n\n  const fetchAnalysis = (start, end) => {\n    setStatusMessage('Retrieving...');\n    setAnalysis(null);\n\n    fetch(`${apiURL}start=${getISODate(start)}&end=${getISODate(end)}`)\n      .then((resp) => resp.json())\n      .then((json) => { setAnalysis(json); })\n      .catch((error) => setStatusMessage(error.message));\n  };\n\n  // Request analysis data on mount if not initialized with it.\n  useEffect(\n    () => { if (!initialData) fetchAnalysis(DEFAULT_START, DEFAULT_END) },\n    []\n  );\n\n  return (\n    <div>\n      <Container>\n        <Row className='py-5'>\n          <ForecastRangeForm handleSubmit={fetchAnalysis} />\n        </Row>\n      </Container>\n      <div>\n        {analysis\n          ? <ForecastAnalysis analysis={analysis} />\n          : (<Container>\n            <Row className='d-flex justify-content-center'>\n              {statusMessage}\n            </Row>\n          </Container>)\n        }\n      </div>\n    </div>\n  );\n}\n\n// Pair of DayPickerInputs used to pick start and end dates that are passed to handlSubmit.\nfunction ForecastRangeForm({ handleSubmit }) {\n  const [start, setStart] = useState(DEFAULT_START);\n  const [end, setEnd] = useState(DEFAULT_END);\n  \n  let warning = '';\n  if (start === null || end === null) {\n    warning = 'Data not available for all selected dates.'\n  } else if (!start) {\n    warning = 'Select valid start date.'\n  } else if (!end) {\n    warning = 'Select valid end date.'\n  } else if (end < start) {\n    warning = 'Start date must be before end date.'\n  }\n\n  return (\n    <Container>\n      <Row className='d-flex justify-content-center'>\n        <Col xs={'auto'}>\n          <ForecastDayPicker\n            label={'Start'}\n            value={start}\n            onChange={setStart}\n          />\n        </Col>\n        <Col xs={'auto'}>\n          <ForecastDayPicker\n            label={'End'}\n            value={end}\n            onChange={setEnd}\n          />\n        </Col>\n        <Col md={2} className='d-flex align-self-center justify-content-center mt-3'>\n          <Button\n            disabled={warning}\n            onClick={() => { if (!warning) handleSubmit(start, end) }}\n          >\n            Submit\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <span className={'text-center text-danger position-absolute w-100'}>\n            {warning}\n          </span>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n// Wrap DayPickerInput with a label. onChange will execute when a valid day is\n// selected. rest props are passed to the DayPickerInput.\nfunction ForecastDayPicker({ label, onChange, ...rest }) {\n  const disabledDays = {\n    before: DATA_START,\n    after: DATA_END,\n  };\n\n  return (\n    <Col className='pb-3'>\n      <Row>\n        <Col>\n          <label>\n            {`${label}:`}\n          </label>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DayPickerInput\n            {...rest}\n            onDayChange={(day, mod) => { onChange(mod.disabled ? null : day) }}\n            dayPickerProps={{ disabledDays }}\n          />\n        </Col>\n      </Row>\n    </Col>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App\n\t\tapiURL='/OAX/forecasts/analyze?'\n\t\tinitialData={window.CACHED_DATA}\n\t/>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}