{"version":3,"sources":["dateUtilities.js","App.js","serviceWorker.js","index.js"],"names":["getDaysAgo","days","date","Date","setDate","getDate","getISO","toISOString","split","API_URL","React","createElement","ForecastDayPicker","props","useState","warned","setWarned","Col","md","Row","label","className","onDayChange","day","mod","disabled","onChange","dayPickerProps","disabledDays","before","after","DateRangeForm","onFetch","start","setStart","end","setEnd","fetchReturn","fetch","useEffect","Container","value","Button","onClick","AnalysisChart","analysis","weather","obsData","obs","map","ob","x","time","y","observed_weather","getFcastData","leadDays","fcasts","fcast","valid_time","predicted_weather","fcastLines","push","data","style","opacity","stroke","key","scale","domainPadding","tickCount","tickFormat","t","getMonth","getHours","ticks","size","offsetY","dependentAxis","crossAxis","AnalysisPage","setAnalysis","resultsMessage","setResultsMessage","request","then","resp","json","catch","error","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f12078b.chunk.js","sourcesContent":["export function getLastMonthStart() {\r\n\tconst date = new Date();\r\n\tdate.setMonth(date.getMonth() - 1);\r\n\tdate.setDate(1);\r\n\treturn date;\r\n}\r\n\r\nexport function getLastMonthEnd() {\r\n\tconst date = new Date();\r\n\tdate.setDate(0);\r\n\treturn new Date(Math.min(date.valueOf(), getDaysAgo(2).valueOf()));\r\n}\r\n\r\nexport function getDaysAgo(days) {\r\n\tconst date = new Date();\r\n\tdate.setDate(date.getDate() - days);\r\n\treturn date;\r\n}\r\n\r\nexport function getISO(date) {\r\n\treturn date.toISOString().split('T')[0];\r\n}","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport './App.css';\n\nimport { VictoryChart, VictoryAxis, VictoryLine } from 'victory';\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n\nimport { getDaysAgo, getISO } from './dateUtilities.js';\n\nconst API_URL = '_self' in React.createElement('div') ?\n  'https://weather2019.appspot.com/OAX/forecasts/analyze?' :\n  '/OAX/forecasts/analyze?';\n\nfunction ForecastDayPicker(props) {\n  let [warned, setWarned] = useState(false);\n\n  return (\n    <Col md={'auto'}>\n      <Row>\n        <Col>\n          <label>\n            {props.label + ':'}\n          </label>\n          <span className={'advisory float-right text-danger'}>\n            {` ${warned ? 'Check date.' : ''}`}\n          </span>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DayPickerInput\n            {...props}\n            onDayChange={(day, mod) => {\n              if (!day || (mod.disabled && !warned)) {\n                setWarned(true);\n              } else if (day && !mod.disabled) {\n                if (warned) {\n                  setWarned(false);\n                }\n                props.onChange(day);\n              }\n            }}\n            dayPickerProps={{\n              disabledDays: {\n                before: new Date(2019, 1, 1),\n                after: getDaysAgo(2),\n              }\n            }}\n          />\n        </Col>\n      </Row>\n    </Col>\n  );\n}\n\nfunction DateRangeForm({onFetch}) {\n  let [start, setStart] = useState(getDaysAgo(10));  \n  let [end, setEnd] = useState(getDaysAgo(3));\n\n  const fetchReturn = () => (\n    onFetch(fetch(`${API_URL}start=${getISO(start)}&end=${getISO(end)}`))\n  );\n\n  useEffect(fetchReturn, []);\n\n  return (\n    <Container>\n      <Row className='align-items-end justify-content-center'>\n        <ForecastDayPicker\n          label={'Start'}\n          value={start}\n          onChange={setStart}\n        />\n        <ForecastDayPicker\n          label={'End'}\n          value={end}\n          onChange={setEnd}\n        />\n        <Col md={2}>\n          <Button\n            onClick={fetchReturn}\n          >\n            Analyze\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction AnalysisChart({analysis, weather='temperature'}) {\n  const obsData = analysis.obs.map((ob) => ({\n    x: ob.time,\n    y: ob.observed_weather[weather],\n  }));\n  const getFcastData = (leadDays) => {\n    return analysis.fcasts[leadDays].map((fcast) => ({\n      x: fcast.valid_time,\n      y: fcast.predicted_weather[weather]\n    }));\n  };\n\n  const fcastLines = [];\n  for (const leadDays in analysis.fcasts) {\n    fcastLines.push(\n      <VictoryLine\n        data={getFcastData(leadDays)}\n        style={{\n          data: {\n            opacity: leadDays > 1 ? (8 - leadDays)/10 : 1.0,\n            stroke: 'red'\n          }\n        }}\n        key={leadDays}\n      />  \n    );\n  }\n  \n  return (\n    <VictoryChart scale={{x: \"time\"}} domainPadding={{y: 20}} >\n      \n      <VictoryAxis\n        tickCount={4}\n        tickFormat={(t) => {\n          const date = new Date(t);\n          return `${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:00`\n        }}\n        style={{ticks: {stroke: \"black\", size: 5}}}\n        offsetY={50}\n      />\n      <VictoryAxis dependentAxis crossAxis={false}/>\n\n      {fcastLines}\n      <VictoryLine data={obsData} />\n\n    </VictoryChart>    \n  );\n}\n\nfunction AnalysisPage() {\n  let [analysis, setAnalysis] = useState(null);\n  let [resultsMessage, setResultsMessage] = useState('Select date range.');\n  \n  return (\n    <Container>\n      <Row>\n        <DateRangeForm\n          onFetch={(request) => {\n            setResultsMessage('Retrieving results...');\n            setAnalysis(null);\n            request.then((resp) => resp.json())\n            .then((json) => setAnalysis(json))\n            .catch((error) => setResultsMessage(error.message));\n          }}\n        />\n      </Row>\n      <Row>\n        {\n          analysis ?\n            <AnalysisChart analysis={analysis} weather='temperature' /> :\n            resultsMessage\n        }\n      </Row>\n    </Container>\n  );\n}\n\nexport default AnalysisPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}