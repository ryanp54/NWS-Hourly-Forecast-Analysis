{"version":3,"sources":["helpers.js","forecastAnalysis.js","App.js","index.js"],"names":["toTitleCase","str","replace","match","toUpperCase","toLowerCase","removeTime","date","justDate","Date","setHours","setMinutes","setSeconds","setMilliseconds","getDaysAgo","days","setDate","getDate","getMidnightDateOrTime","dateTime","getMonth","time","toLocaleTimeString","split","getHours","slice","getISODate","toISOString","ForecastAnalysis","analysis","useState","weather","setWeather","Container","Row","Col","Tabs","justify","className","activeKey","onSelect","key","map","weatherType","Tab","eventKey","title","Object","keys","includes","metadata","display_name","disabled","AnalysisChart","chart","activeDataDetail","activeData","setActiveData","handleChange","useCallback","useEffect","prop_name","MemodBinsChart","onCursorChange","ActiveDataDisplay","displayInfo","units","x","y","data","MemodForecastChart","ChartContainer","xs","style","minHeight","children","minWidth","maxWidth","marginLeft","marginRight","React","memo","activeDay","setActiveDay","activeFcasts","getActiveFcasts","chartedData","push","displayName","color","leadDay","i","name","entries","lead_days","fcasts","datum","opacity","obs","erreas","errors","reduce","timeStr","amount","erreaDatum","y0","lastErrea","length","valueOf","errea","fill","stroke","legendSymbol","type","getChartedData","legendData","chartedGroups","forecastGroup","find","group","props","otherGroups","filter","day","dayLabel","line","child","theme","symbol","cursor","labels","isCharted","getLegendData","TitleStatsDisplay","scale","domainPadding","padding","top","bottom","left","right","containerComponent","voronoiDimension","labelComponent","Cursor","onActivated","points","tickCount","tickFormat","ticks","size","tickLabels","fontSize","grid","offsetY","dependentAxis","crossAxis","axisLabelComponent","dx","angle","label","events","eventHandlers","onClick","evt","target","labelName","allFcastDays","toggleDisplayed","orientation","borderPadding","gutter","symbolSpacer","range","strokeWidth","x1","x2","y1","Math","max","y2","min","activeDayDisplayText","stats","cumulative_stats","prop","LabeledValue","value","flat","Boolean","getPrototypeOf","prototype","header","xDesc","_x","toLocaleString","dateStyle","timeStyle","formattedErrorDatum","formattedData","forEach","_y","childName","formattedValue","formatForDisplay","val","unit","round","activeAnalysis","bin_count","bins","bias","legend","dy","colorScale","offset","DEFAULT_START","DEFAULT_END","DATA_START","DATA_END","MAX_DAYS","MS_PER_DAY","ForecastRangeForm","handleSubmit","start","setStart","end","setEnd","warning","ForecastDayPicker","onChange","md","Button","rest","disabledDays","before","after","onDayChange","mod","dayPickerProps","StatusMessage","message","lg","ReactDOM","render","apiURL","initialData","JSON","parse","setAnalysis","statusMessage","setStatusMessage","fetchAnalysis","animateStatus","setInterval","previous","fetch","then","resp","json","catch","error","finally","clearInterval","window","CACHED_DATA","document","getElementById"],"mappings":"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","file":"static/js/main.84dfeb0d.chunk.js","sourcesContent":["// Convert snake case to title case.\r\nexport function toTitleCase(str) {\r\n  return (\r\n    str.replace(\r\n      /_/,\r\n      ' ',\r\n    ).replace(\r\n      /(?:(^|\\(|\"|\\s|-|,)\\w)\\w+/g,\r\n      (match) => (match === match.toUpperCase() ? match.toLowerCase() : match),\r\n    ).replace(\r\n      /(?:^|\\(|\"|\\s|-|,)\\w/g,\r\n      (match) => match.toUpperCase(),\r\n    )\r\n  );\r\n}\r\n\r\nexport function removeTime(date) {\r\n  if (!date) {\r\n    return date;\r\n  }\r\n  \r\n  const justDate = new Date(date);\r\n  justDate.setHours(0);\r\n  justDate.setMinutes(0);\r\n  justDate.setSeconds(0);\r\n  justDate.setMilliseconds(0);\r\n\r\n  return justDate;\r\n}\r\n\r\nexport function getDaysAgo(days) {\r\n  const date = new Date();\r\n  date.setDate(date.getDate() - days);\r\n\r\n  return removeTime(date);\r\n}\r\n\r\n// Return month/day if time is midnight, otherwise return the time (hh:mm).\r\nexport function getMidnightDateOrTime(dateTime) {\r\n  const date = `${dateTime.getMonth() + 1}/${dateTime.getDate()}`;\r\n  const time = dateTime.toLocaleTimeString().split(/[:\\s]/);\r\n\r\n  return dateTime.getHours() ? `${time[0]} ${time.slice(-1)}` : date;\r\n}\r\n\r\n// Return an instance of Date of the first day of the previous month. Year is ignored.\r\nexport function getLastMonthStart() {\r\n  const date = new Date();\r\n  date.setMonth(date.getMonth() - 1);\r\n  date.setDate(1);\r\n\r\n  return date;\r\n}\r\n\r\n// Return iso formatted date without time info.\r\nexport function getISODate(date) {\r\n  return date.toISOString().split('T')[0];\r\n}\r\n\r\nexport function getISOHourRounded(date) {\r\n  const dateCopy = new Date(date);\r\n  if (date.getMinutes() >= 30) {\r\n    dateCopy.setHours(date.getHours() + 1);\r\n  }\r\n  const [hours] = dateCopy.toISOString().split('T')[1].split(':');\r\n\r\n  return `${getISODate(date)}T${hours}:00`;\r\n}\r\n\r\n// Instantiate a Date, but with the tiemzone set to GMT instead of the local one.\r\nexport function parseToUTC(iso) {\r\n  const date = new Date(iso);\r\n\r\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours()));\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n} from 'react-bootstrap';\r\n\r\nimport {\r\n  VictoryChart,\r\n  VictoryAxis,\r\n  VictoryArea,\r\n  VictoryBar,\r\n  VictoryGroup,\r\n  VictoryLabel,\r\n  VictoryLine,\r\n  VictoryLegend,\r\n  VictoryVoronoiContainer,\r\n} from 'victory';\r\n\r\nimport { toTitleCase, getMidnightDateOrTime } from './helpers';\r\n\r\n// Allow navigation between the weather AnalysisCharts available via Tabs.\r\nexport default function ForecastAnalysis({ analysis }) {\r\n  const [weather, setWeather] = useState('temperature');\r\n\r\n  // The weather type property names AnalysisChart is set up to handle.\r\n  const workingWeathers = [\r\n    'temperature',\r\n    'dewpoint',\r\n    'wind_speed',\r\n    'cloud_cover',\r\n    'precip_chance',\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Tabs justify className='h6'\r\n              activeKey={weather}\r\n              onSelect={(key) => setWeather(key)}\r\n            >\r\n              {workingWeathers.map((weatherType) => (\r\n                <Tab className='align-center'\r\n                  eventKey={weatherType}\r\n                  title={\r\n                    !Object.keys(analysis).includes(weatherType)\r\n                      ? toTitleCase(weatherType)\r\n                      : analysis[weatherType].metadata.display_name\r\n                    }\r\n                  key={weatherType}\r\n                  disabled={!Object.keys(analysis).includes(weatherType)}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      \r\n      <AnalysisChart\r\n        analysis={analysis[weather]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Handle setting up the correct chart and ActiveDataDisplay based on the weather type of the\r\n// analysis prop, and update these components when changes occur.\r\nfunction AnalysisChart({ analysis }) {\r\n  const [activeData, setActiveData] = useState([]);\r\n\r\n  // Memomize callback so memoized children it's passed to don't render unnecessarily.\r\n  const handleChange = useCallback(setActiveData, []);\r\n\r\n  // Make sure activeData gets reset when chart switches.\r\n  useEffect(() => setActiveData([]), [analysis]);\r\n\r\n  let chart;\r\n  let activeDataDetail;\r\n  if (analysis.metadata.prop_name === 'precip_chance') {\r\n    chart = <MemodBinsChart analysis={analysis} onCursorChange={handleChange} />;\r\n    activeDataDetail = (\r\n      <ActiveDataDisplay\r\n        displayInfo={{\r\n          // Overwrite units property of metadata to make y unitless.\r\n          ...analysis.metadata,\r\n          ...{ units: { x: analysis.metadata.units, y: '' } },\r\n        }}\r\n        data={activeData}\r\n      />\r\n    );\r\n  } else {\r\n    chart = (\r\n      <MemodForecastChart\r\n        analysis={analysis}\r\n        onCursorChange={handleChange}\r\n      />\r\n    );\r\n    activeDataDetail = (\r\n      <ActiveDataDisplay\r\n        displayInfo={analysis.metadata}\r\n        data={activeData}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Col>\r\n      <ChartContainer>\r\n        {chart}\r\n      </ChartContainer>\r\n      <Container>\r\n        <Row>\r\n          <Col xs={11}\r\n            // Hold vertical space for element even when empty to avoid frequent\r\n            // addition/removal of scroll bar.\r\n            style={{ minHeight: '75px'}}>\r\n            {activeDataDetail}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Col>\r\n  );\r\n}\r\n\r\n// Custom Container for Charts limit Charts to a reasonable size range. Should not have\r\n// any regular Containers as its ancestors.\r\nfunction ChartContainer({ children }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        minWidth: '335px',\r\n        maxWidth: '970px',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Display visualization of analysis inlcuding a chart of forecasted vs observed values and\r\n// highlight areas where the forecast was considered inaccurate. The chart includes a\r\n// TitleStatsDisplay as a title that displays the forecast stats and an interactive legend that\r\n// allows selection of which lead day time forecast to display. When the mouse cursor moves over\r\n// the chart onCursorChange will be passed a list of the nearest data point objects.\r\n// Rendering is expensive. Use the memoized version available as MemodForecastChart.\r\nfunction ForecastChart({ analysis, onCursorChange }) {\r\n  // All forecasts will be displayed when activeDay is falsey.\r\n  const [activeDay, setActiveDay] = useState(null);\r\n\r\n  const activeFcasts = getActiveFcasts(analysis, activeDay);\r\n  const chartedData = getChartedData(analysis, activeDay);\r\n  const legendData = getLegendData(analysis, chartedData);\r\n\r\n  // Called by the onClick handler of the VictoryLegend.\r\n  const toggleDisplayed = (labelName) => {\r\n    const allFcastDays = Object.keys(analysis.lead_days);\r\n    const [day] = labelName.split('-Day');\r\n\r\n    if (!activeDay && labelName.includes('Error')) {\r\n      setActiveDay(activeFcasts[0]);\r\n    } else if ((!activeDay || !activeFcasts.includes(day)) && allFcastDays.includes(day)) {\r\n      setActiveDay(day);\r\n    } else if (labelName === 'Actual' || activeFcasts.includes(day)) {\r\n      setActiveDay(null);\r\n    }\r\n\r\n    // Reset cursor's nearest data points.\r\n    onCursorChange([]);\r\n  };\r\n\r\n  return (\r\n    <Row className='pt-3'>\r\n      <Col xs={12} className='w-100'>\r\n        <TitleStatsDisplay\r\n          activeDay={activeDay}\r\n          analysis={analysis}\r\n        />\r\n      </Col>\r\n      <Col xs={12} className='w-100'>\r\n        <VictoryChart\r\n          scale={{ x: 'time' }}\r\n          domainPadding={{ y: 20 }}\r\n          padding={{\r\n            top: 25, bottom: 50, left: 50, right: 75,\r\n          }}\r\n          containerComponent={\r\n            <VictoryVoronoiContainer\r\n              voronoiDimension='x'\r\n              labels={() => null} // Otherwise Cursor is not displayed.\r\n              labelComponent={<Cursor />}\r\n              onActivated={(points) => onCursorChange(points)}\r\n            />\r\n          }\r\n        >\r\n\r\n          <VictoryAxis\r\n            tickCount={6}\r\n            tickFormat={getMidnightDateOrTime}\r\n            style={{\r\n              ticks: { stroke: 'black', size: 5 },\r\n              tickLabels: { fontSize: 12 },\r\n              grid: { stroke: 'grey' },\r\n            }}\r\n            offsetY={50}\r\n          />\r\n          <VictoryAxis\r\n            dependentAxis\r\n            crossAxis={false}\r\n            axisLabelComponent={<VictoryLabel dx={-15} angle={0} />}\r\n            label={analysis.metadata.units}\r\n            style={{\r\n              grid: { stroke: 'grey' },\r\n              tickLabels: { fontSize: 12 },\r\n            }}\r\n          />\r\n\r\n          <VictoryLegend\r\n            data={legendData}\r\n            events={[{\r\n              eventHandlers: {\r\n                onClick: (evt, target) => {\r\n                  if (target && target.datum) {\r\n                    toggleDisplayed(target.datum.name);\r\n                  }\r\n                },\r\n              },\r\n            }]}\r\n            x={25} y={10}\r\n            orientation='horizontal'\r\n            borderPadding={{\r\n              top: 0, bottom: 0, left: 5, right: 0,\r\n            }}\r\n            gutter={10}\r\n            symbolSpacer={5}\r\n            style={{ labels: { fontSize: 9 } }}\r\n          />\r\n\r\n          {chartedData}\r\n\r\n        </VictoryChart>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\nconst MemodForecastChart = React.memo(ForecastChart);\r\n\r\n// Return an array of integers in string form that correspond to the active forecast lead days.\r\nfunction getActiveFcasts(analysis, activeDay) {\r\n  return activeDay ? [activeDay] : Object.keys(analysis.lead_days);\r\n}\r\n\r\n// Generate and return an array of VictoryChart components to be charted on the ForecastChart.\r\n// ActiveDataDisplay, getLegendData, and the local toggleDisplay in ForecastChart depend on the\r\n// implementation details here, most significantly, the name and displayName prop values.\r\nfunction getChartedData(analysis, activeDay) {\r\n  const chartedData = [];\r\n  const activeFcasts = getActiveFcasts(analysis, activeDay);\r\n\r\n  // Add forecasts lines\r\n  chartedData.push(\r\n    <VictoryGroup displayName='Forecast' key='Forecast' color='red'>\r\n      {\r\n        activeFcasts.map((leadDay, i) => (\r\n          <VictoryLine\r\n            displayName={`${leadDay}-Day`}\r\n            name={`${leadDay}-Day`}\r\n            key={leadDay}\r\n            data={Object.entries(analysis.lead_days[leadDay].fcasts)}\r\n            x={(datum) => new Date(datum[0])}\r\n            y={1}\r\n            style={{\r\n              data: {\r\n                opacity: i >= 1 ? (8 - i) / 10 : 1.0,\r\n              },\r\n            }}\r\n          />\r\n        ))\r\n      }\r\n    </VictoryGroup>,\r\n  );\r\n\r\n  // Add observed weather line\r\n  chartedData.push(\r\n    <VictoryGroup displayName='Actual' key='Actual' color='black'>\r\n      <VictoryLine\r\n        displayName='Actual'\r\n        name='Actual'\r\n        data={Object.entries(analysis.obs)}\r\n        x={(datum) => new Date(datum[0])}\r\n        y={1}\r\n      />\r\n    </VictoryGroup>,\r\n  );\r\n\r\n  // Forecast errors should only be charted when a single forecast lead day is active.\r\n  let erreas = [];\r\n  if (activeDay) {\r\n    erreas = Object.entries(analysis.lead_days[activeDay].errors).reduce(\r\n      // Create data points for error VictoryAreas and organize into an array of arrays of\r\n      // data for the separate contiguous VictoryAreas.\r\n      (errors, [timeStr, amount]) => {\r\n        const time = new Date(timeStr);\r\n        const erreaDatum = {\r\n          x: time,\r\n          y: analysis.lead_days[activeDay].fcasts[timeStr],\r\n          y0: analysis.obs[timeStr],\r\n          amount,\r\n        };\r\n\r\n        const lastErrea = errors.length > 0 ? errors[errors.length - 1] : false;\r\n        if (\r\n          lastErrea\r\n          && lastErrea.slice(-1)[0].x.valueOf() === time.valueOf() - 3600000\r\n        ) {\r\n          lastErrea.push(erreaDatum);\r\n        } else {\r\n          errors.push([erreaDatum]);\r\n        }\r\n\r\n        return errors;\r\n      },\r\n      [],\r\n    ).map((errea, i) => (\r\n      // Now actually create the VictoryAreas from the data.\r\n      <VictoryArea displayName={`Error-Area-${i}`} key={`Error-Area-${i}`}\r\n        name={`Error-Area-${i}`}\r\n        data={errea}\r\n      />\r\n    ));\r\n  }\r\n\r\n  // Add the VictoryAreas that were created.\r\n  chartedData.push(\r\n    <VictoryGroup\r\n      displayName='Error' key='Error'\r\n      style={{\r\n        data: {\r\n          opacity: 0.4,\r\n          fill: 'magenta',\r\n          stroke: 'magenta',\r\n        },\r\n        // getLegendData will use this attribute as the symbol type when it's present.\r\n        legendSymbol: { type: 'square' },\r\n      }}\r\n    >\r\n      {erreas}\r\n    </VictoryGroup>,\r\n  );\r\n\r\n  return chartedData;\r\n}\r\n\r\n// Generate the keys(data) for the chart legend. The name attributes that are set are especially\r\n// important as they are passed to toggleDisplay in ForecastChart.\r\nfunction getLegendData(analysis, chartedGroups) {\r\n  const legendData = [];\r\n  const forecastGroup = chartedGroups.find((group) => group.props.displayName === 'Forecast');\r\n  const otherGroups = chartedGroups.filter((group) => group.props.displayName !== 'Forecast');\r\n\r\n  // Always add all forcasts available in the analysis so they can be clicked to be activated.\r\n  legendData.push(\r\n    ...Object.keys(analysis.lead_days).map((day) => {\r\n      const dayLabel = `${day}-Day`;\r\n\r\n      // Find line if forecast lead-day is displayed and set styling accordingly.\r\n      const line = forecastGroup.props.children.find(\r\n        (child) => child.props.name === dayLabel,\r\n      );\r\n      const style = line && { ...line.props.theme.line.style, ...line.props.style };\r\n\r\n      return {\r\n        name: `${day}-Day`,\r\n        symbol: {\r\n          opacity: line ? style.data.opacity : 0.1,\r\n          fill: forecastGroup.props.color,\r\n          cursor: 'pointer',\r\n        },\r\n        labels: {\r\n          opacity: line ? 1 : 0.2,\r\n          cursor: 'pointer',\r\n        },\r\n      };\r\n    }),\r\n  );\r\n\r\n  // Add other groups and style as active or inactive based on weather the actually have any\r\n  // charted data.\r\n  legendData.push(\r\n    ...otherGroups.map(\r\n      (group) => {\r\n        const style = { ...group.props.theme.line.style, ...group.props.style };\r\n        const isCharted = group.props.children.length !== 0;\r\n        return {\r\n          name: group.props.displayName,\r\n          symbol: {\r\n            opacity: isCharted ? style.data.opacity : 0.2,\r\n            fill: style.data.stroke,\r\n            cursor: 'pointer',\r\n            type: style.legendSymbol && style.legendSymbol.type ? style.legendSymbol.type : 'circle',\r\n          },\r\n          labels: {\r\n            opacity: isCharted ? 1 : 0.2,\r\n            cursor: 'pointer',\r\n          },\r\n        };\r\n      },\r\n    ),\r\n  );\r\n\r\n  return legendData;\r\n}\r\n\r\n// Display a vertical line on chart at the x position. Use to show mouse pointer position on chart.\r\nfunction Cursor({ x, scale }) {\r\n  const range = scale.y.range();\r\n  return (\r\n    <line\r\n      style={{\r\n        stroke: 'lightgrey',\r\n        strokeWidth: 1,\r\n      }}\r\n      x1={x}\r\n      x2={x}\r\n      y1={Math.max(...range)}\r\n      y2={Math.min(...range)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TitleStatsDisplay({ analysis, activeDay }) {\r\n  const activeDayDisplayText = !activeDay ? 'Cumulative' : `${activeDay}-Day`;\r\n  const stats = !activeDay ? analysis.cumulative_stats : analysis.lead_days[activeDay].stats;\r\n\r\n  return (\r\n    <Container>\r\n      <Row className='d-flex justify-content-center'>\r\n        <h5>\r\n          {`Forecast Accuracy: ${activeDayDisplayText}`}\r\n        </h5>\r\n      </Row>\r\n      <Row className='d-flex justify-content-center'>\r\n          {\r\n            // Stats objects contain multiple entries, but happen to always include the key of the\r\n            // parent in the entry that contains the actual value we want to display.\r\n            // TODO: refactor to be less obtuse.\r\n            Object.keys(stats).map((type) => (\r\n              Object.keys(stats[type]).map((prop) => {\r\n                if (type.includes(prop)) {\r\n                  return (\r\n                    <LabeledValue\r\n                     label={type}\r\n                     value={stats[type][prop]}\r\n                     units={analysis.metadata.units}\r\n                     key={prop}\r\n                   />\r\n                  );\r\n                }\r\n                return false;\r\n              })\r\n            )).flat().filter(Boolean)\r\n          }\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// Display active data points. displayInfo be a string or object with x and y attributes of the\r\n// units to be used with the data points and data should be a list of the datum objects.\r\nfunction ActiveDataDisplay({ displayInfo, data }) {\r\n  if (!data || data.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  let { units } = displayInfo;\r\n  if (!units || Object.getPrototypeOf(units) !== Object.prototype) {\r\n    units = { x: units, y: units };\r\n  }\r\n\r\n  // Format header text depending on type of charted data\r\n  let header = displayInfo.display_name || '';\r\n  let xDesc = '';\r\n  if (data[0]._x instanceof Date) {\r\n    const [date, time] = data[0]._x\r\n      .toLocaleString({ dateStyle: 'short', timeStyle: 'short' }).split(',');\r\n    xDesc = `${header && ' on '}${date} at ${time}`;\r\n  } else {\r\n    xDesc = `${header && ': '}${data[0][0]} ${units.x}`;\r\n  }\r\n  header = `${header}${xDesc}`;\r\n\r\n\r\n  const formattedData = [];\r\n  let formattedErrorDatum;\r\n  data.forEach((datum) => {\r\n    if (datum._y === null) {\r\n      return;\r\n    }\r\n\r\n    if (!datum.childName.includes('Error')) {\r\n      formattedData.push(\r\n        <LabeledValue\r\n          label={datum.childName}\r\n          value={datum._y}\r\n          units={units.y}\r\n          key={datum.childName}\r\n        />,\r\n      );\r\n    } else {\r\n      formattedErrorDatum = <LabeledValue\r\n          label='Forecast Error'\r\n          value={datum.amount}\r\n          units={units.y}\r\n          key='Forecast Error'\r\n          className='text-danger'\r\n        />;\r\n    }\r\n  });\r\n\r\n  // Error LabeledValue is pushed at the end so that it is displayed last.\r\n  if (formattedErrorDatum) {\r\n    formattedData.push(formattedErrorDatum);\r\n  }\r\n\r\n  return (\r\n    <Col className='h6 font-weight-normal'>\r\n      <Row className='pb-2'>\r\n        {header}\r\n      </Row>\r\n      <Row>\r\n        {formattedData}\r\n      </Row>\r\n    </Col>\r\n  );\r\n}\r\n\r\n// Display text in the form label: value units. className is appended to the containing span's\r\n// className and is optional.\r\n// TODO: Eliminate the need for type by handling special accuracy formatting else where.\r\nfunction LabeledValue({\r\n  label, value, units, type, className,\r\n}) {\r\n  const formatForDisplay = (val, unit) => `${Math.round(val * 10) / 10} ${unit}`;\r\n  const valueType = (type || label).toLowerCase();\r\n\r\n  let formattedValue;\r\n  if (valueType === 'accuracy') {\r\n    formattedValue = formatForDisplay(value * 100.0, '%');\r\n  } else {\r\n    formattedValue = formatForDisplay(value, units);\r\n  }\r\n  return (\r\n    <span className={`mr-3 d-inline-block ${className}`}>\r\n      <span> {toTitleCase(label)}: </span>\r\n      <span className='font-weight-light ml-2'> {formattedValue} </span>\r\n    </span>\r\n  );\r\n}\r\n\r\n// Analogous to ForecastChart, but for precip probablity forcasts.\r\n// TODO: Refactor this and ForcastChart to eliminiate redundant code.\r\nfunction BinsChart({ analysis, onCursorChange }) {\r\n  // Cumulative stats will be displayed when activeDay is falsey.\r\n  const [activeDay, setActiveDay] = useState(null);\r\n\r\n  const activeAnalysis = activeDay\r\n    ? analysis.lead_days[activeDay].stats\r\n    : analysis.cumulative_stats;\r\n  const data = Object.entries(activeAnalysis.bin_count.bins);\r\n\r\n  const legendData = Object.keys(analysis.lead_days).map((day) => (\r\n    {\r\n      name: `${day}-Day`,\r\n      symbol: {\r\n        opacity: activeDay === day ? 1.0 : 0.2,\r\n        fill: 'darkblue',\r\n        type: 'square',\r\n        cursor: 'pointer',\r\n      },\r\n      labels: {\r\n        opacity: activeDay === day ? 1.0 : 0.3,\r\n        cursor: 'pointer',\r\n      },\r\n    }\r\n  ));\r\n  legendData.push({\r\n    name: 'Cumulative',\r\n    symbol: {\r\n      opacity: !activeDay ? 1.0 : 0.2,\r\n      fill: 'darkblue',\r\n      type: 'square',\r\n      cursor: 'pointer',\r\n    },\r\n    labels: {\r\n      opacity: !activeDay ? 1.0 : 0.3,\r\n      cursor: 'pointer',\r\n    },\r\n  });\r\n  legendData.push({ name: 'Expected', symbol: { fill: 'lightblue', type: 'square' } });\r\n\r\n  const toggleDisplayed = (labelName) => {\r\n    const [day] = labelName === 'Cumulative' ? [null] : labelName.split('-Day');\r\n    if (activeDay !== day && day !== 'Expected') {\r\n      setActiveDay(day);\r\n    }\r\n\r\n    onCursorChange([]);\r\n  };\r\n\r\n  return (\r\n    <Container className='pt-3'>\r\n      <Row className='d-flex justify-content-center'>\r\n        <h5>\r\n          {'Precipitation Chance Bin Counts'}\r\n        </h5>\r\n      </Row>\r\n      <Row className='d-flex justify-content-center'>\r\n        <LabeledValue\r\n          label='Bias'\r\n          value={activeAnalysis.bin_count.bias}\r\n          units='%'\r\n        />\r\n      </Row>\r\n      <Row>\r\n        <VictoryChart\r\n          padding={{\r\n            top: 25, bottom: 50, left: 50, right: 75,\r\n          }}\r\n          containerComponent={\r\n            <VictoryVoronoiContainer\r\n              voronoiDimension='x'\r\n              labels={() => null}\r\n              labelComponent={<Cursor />}\r\n              onActivated={(points) => onCursorChange(points)}\r\n            />\r\n          }\r\n        >\r\n          <VictoryLegend\r\n            x={15} y={5}\r\n            orientation='horizontal'\r\n            borderPadding={{\r\n              top: 0, bottom: 0, left: 5, right: 0,\r\n            }}\r\n            gutter={10}\r\n            symbolSpacer={5}\r\n            style={{ labels: { fontSize: 9 } }}\r\n            data={legendData}\r\n            events={[{\r\n              eventHandlers: {\r\n                onClick: (evt, target, i, legend) => {\r\n                  if (target && target.datum) {\r\n                    toggleDisplayed(target.datum.name);\r\n                  }\r\n                },\r\n              },\r\n            }]}\r\n          />\r\n\r\n          <VictoryAxis\r\n            style={{\r\n              ticks: { stroke: 'black', size: 5 },\r\n              tickLabels: { fontSize: 12 },\r\n              grid: { stroke: 'grey' },\r\n            }}\r\n            label='Forecasted chance of pricipitation (%)'\r\n            offsetY={50}\r\n            axisLabelComponent={<VictoryLabel dy={5} style={{ fontSize: 11 }} />}\r\n          />\r\n          <VictoryAxis\r\n            dependentAxis\r\n            crossAxis={false}\r\n            style={{\r\n              grid: { stroke: 'grey' },\r\n              tickLabels: { fontSize: 12 },\r\n            }}\r\n            label='Number of precipitation observations'\r\n            axisLabelComponent={<VictoryLabel dy={-5} angle={-90} style={{ fontSize: 11 }} />}\r\n          />\r\n\r\n          <VictoryGroup\r\n            colorScale={['darkblue', 'lightblue']}\r\n            offset={5}\r\n          >\r\n            <VictoryBar\r\n              name='Observed occurances'\r\n              data={data}\r\n              x={0}\r\n              y={[1, 'obs']}\r\n            />\r\n            <VictoryBar\r\n              name='Predicted occurances'\r\n              data={data}\r\n              x={0}\r\n              y={[1, 'predicted']}\r\n            />\r\n          </VictoryGroup>\r\n\r\n        </VictoryChart>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nconst MemodBinsChart = React.memo(BinsChart);","import React, { useState, useEffect } from 'react';\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n\nimport {\n  Container, Row, Col, Button,\n} from 'react-bootstrap';\n\nimport ForecastAnalysis from './forecastAnalysis';\nimport { getDaysAgo, getISODate, removeTime } from './helpers';\n\nconst DEFAULT_START = getDaysAgo(8);\nconst DEFAULT_END = getDaysAgo(1);\nconst DATA_START = new Date(2019, 0, 24);\nconst DATA_END = getDaysAgo(1);\nconst MAX_DAYS = 14;\nconst MS_PER_DAY = 1000 * 60 * 60 * 24;\n\nexport default function AnalysisPage({ apiURL, initialData = false }) {\n  const [analysis, setAnalysis] = useState(JSON.parse(initialData));\n  const [statusMessage, setStatusMessage] = useState('Select date range.');\n\n  const fetchAnalysis = (start, end) => {\n    setStatusMessage('Retrieving. . .');\n    setAnalysis(null);\n\n    const animateStatus = setInterval(() => {\n      setStatusMessage((previous) => previous.includes('. . .') ? 'Retrieving' : `${previous} .`);\n    }, 500);\n\n    fetch(`${apiURL}start=${getISODate(start)}&end=${getISODate(end)}`)\n      .then((resp) => resp.json())\n      .then((json) => {\n        setStatusMessage('');\n        setAnalysis(json);\n      })\n      .catch((error) => setStatusMessage(error.message))\n      .finally(() => clearInterval(animateStatus));\n  };\n\n  // Request analysis data on mount if not initialized with it.\n  useEffect(\n    () => { if (!initialData) fetchAnalysis(DEFAULT_START, DEFAULT_END) },\n    []\n  );\n\n  return (\n    <div>\n      <div className='pt-2 pb-4'>\n        <ForecastRangeForm handleSubmit={fetchAnalysis} />\n      </div>\n      <div className='pt-2'>\n        {analysis\n          ? <ForecastAnalysis analysis={analysis} />\n          : <StatusMessage message={statusMessage} />\n        }\n      </div>\n    </div>\n  );\n}\n\n// Pair of DayPickerInputs used to pick start and end dates that are passed to handlSubmit.\nfunction ForecastRangeForm({ handleSubmit }) {\n  const [start, setStart] = useState(DEFAULT_START);\n  const [end, setEnd] = useState(DEFAULT_END);\n\n  const range = removeTime(new Date(end)) - removeTime(new Date(start));\n\n  let warning = '';\n  if (start === null || end === null) {\n    warning = 'Data not available for all selected dates.';\n  } else if (!start) {\n    warning = 'Select valid start date.';\n  } else if (!end) {\n    warning = 'Select valid end date.';\n  } else if (end <= start) {\n    warning = 'Start date must be before end date.';\n  } else if (range >= MAX_DAYS * MS_PER_DAY) {\n    warning = `Date range must be less than ${MAX_DAYS} days.`;\n  }\n\n  return (\n    <Container>\n      <Row className='justify-content-center'>\n        <Col xs={'auto'}>\n          <ForecastDayPicker\n            label={'Start'}\n            value={start}\n            onChange={setStart}\n          />\n        </Col>\n        <Col xs={'auto'}>\n          <ForecastDayPicker\n            label={'End'}\n            value={end}\n            onChange={setEnd}\n          />\n        </Col>\n        <Col md={2} className='d-flex align-self-center justify-content-center mt-3'>\n          <Button\n            disabled={warning}\n            onClick={() => { if (!warning) handleSubmit(start, end) }}\n          >\n            {'Submit'}\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col className='py-1'>\n          <span className='text-center text-danger position-absolute w-100'>\n            {warning}\n          </span>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n// Wrap DayPickerInput with a label. onChange will execute when a valid day is\n// selected. rest props are passed to the DayPickerInput.\nfunction ForecastDayPicker({ label, onChange, ...rest }) {\n  const disabledDays = {\n    before: DATA_START,\n    after: DATA_END,\n  };\n\n  return (\n    <Col className='pb-3'>\n      <Row>\n        <Col>\n          <label>\n            {`${label}:`}\n          </label>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DayPickerInput\n            {...rest}\n            onDayChange={(day, mod) => { onChange(mod.disabled ? null : removeTime(day)) }}\n            dayPickerProps={{ disabledDays }}\n          />\n        </Col>\n      </Row>\n    </Col>\n  );\n}\n\nfunction StatusMessage({ message }) {\n  return (\n    <Container className='py-5 pl-4'>\n      <Row className='justify-content-center'>\n        <Col xs={5} md={3} lg={2}>\n          {message}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap-custom-tabs.css';\nimport App from './App';\n\nReactDOM.render(\n\t<App\n\t\tapiURL='/OAX/forecasts/analyze?'\n\t\tinitialData={window.CACHED_DATA}\n\t/>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}